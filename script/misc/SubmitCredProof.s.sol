// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.12;

import "../../src/contracts/pods/EigenPod.sol";

import "forge-std/Script.sol";
import "forge-std/Test.sol";

// # To load the variables in the .env file
// source .env

// # To deploy and verify our contract
// forge script script/misc/DeployStrategy.s.sol:DeployStrategy --rpc-url $RPC_URL  --private-key $PRIVATE_KEY --broadcast -vvvv

contract SumitCredProof is Script, Test {
    Vm cheats = Vm(HEVM_ADDRESS);

    // EigenLayer Contracts
    EigenPod public eigenPod = EigenPod(payable(0x77Da2A808Cd18Fe8Be57D06EcDBC13be92CD3879));

    function run() external {
        // read and log the chainID
        uint256 chainId = block.chainid;
        emit log_named_uint("You are deploying on ChainID", chainId);

        vm.startBroadcast();

        uint40[] memory validatorIndices = new uint40[](1);
        validatorIndices[0] = 567128;

        BeaconChainProofs.WithdrawalCredentialProof[] memory withdrawalCredentialProofs = new BeaconChainProofs.WithdrawalCredentialProof[](1);
        withdrawalCredentialProofs[0] = BeaconChainProofs.WithdrawalCredentialProof({
                beaconStateRoot: bytes32(0x99f282479371c784c4a7f87b33c68b755bb87f30506bd40db902e25fabeeb7d8),
                stateRootProof: hex"edc92ed81baad3f23907b0757fc9f2b2b5d3d4f713e1ec169a2850f2955796104ed10944f11821e7490cf5297e7566ef22ea92dea1b1f8a2ff80b11ce1e5fe8b9697f99aa7a17c4bc4fda8e7d720db70b4044ccd080be0ab58c145e90ee12530",
                validatorFieldsProof: hex"9590f21e7d6be73dd67ea352bc580a15040ea439d980f8e457e6913df2cc50e6e17697ba02892c9ea5306dfc06b8230604facbb6f1619f512f5c194403a259c59cf43e38df90ad716bc933467821e287922d3c070e5c0d4201c44aeb7425213b8a174c7909920d4c1415f23dc95cc4387ed3c61b15d10e3492ec4187fa72acc1119af7a03458944e3d99d0aaf112824a0414a05852c371aa7d998496c6d10c90f94bc9db73b32a900551300fc2085c0a8e3203c6dd908b42e24b17c920eaf580d1110eaae5d600fe798a5c8feba7c8e7b6ebebeeb5c15a8329821c14bea807e50457b491b1bb86ff946f011634bbd8c9f5a90f5743b76136304d81ae1b16cbd61968b9c87943647e8c10748b940ee7a8c5eb30936aa8fd9dc8a2f8a0139122fdb08cae59b47c1133f98aca412cc61f6948bf622e1f75aee0689d3f980510bd18603219609c108c2a9aab97225ad62917d83038b6cf79fd3d3ce4c98041b45887b0ba503ea72fb7de2619e2bbc348d2273a3ecfa40043dc53cefb7f448fab9ef18ae9c73043c4e6a973f055f231ff4c410306236f24fb2aeba9ec9a877ddb39df61058d569ff102d48241c2f4dfb495438ca06da31b4925fab4b84f2df397ffe84b66a13b55d7777aae71fab608deb17c79f77d02b5860fcbcf8d89a0aac0c8c6a22ef28e5db2c67297bbdb2cac52d2f3e7226572fe9a41e21aef86fcaa9f0ad68fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a46c3ed686142e03651dd13c665bcb3e01fb58cd544d2e2a47e4fdaa387ab0a230cddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f55d3080000000000000000000000000000000000000000000000000000000000a2d5050000000000000000000000000000000000000000000000000000000000eebb0d5669c59af620ad967407015115b2fa27eb8bb43d476bb1059362d6d71aaa25559c06cc282b55fd5c471d65d7b7afb78be9940b40fa56484a8b7f44acbadfe265a74cdfa06e4af6ee1909c38604bd187db95054a8175dc92cea9f959385bf4c44cf4f7373b0c77a8ec3d4c4611d0a4f0dbcb881e2d3067d76ba33e8c020"
            });
        
        bytes32[][] memory validatorFields = new bytes32[][](1);
        validatorFields[0] = new bytes32[](8);
        validatorFields[0][0] = bytes32(0x54f23d89b30ea928a0f94334c21ff5afb835175c3e204780f8210d15e0e97919);
        validatorFields[0][1] = bytes32(0x01000000000000000000000077da2a808cd18fe8be57d06ecdbc13be92cd3879);
        validatorFields[0][2] = bytes32(0x0040597307000000000000000000000000000000000000000000000000000000);
        validatorFields[0][3] = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
        validatorFields[0][4] = bytes32(0xa921030000000000000000000000000000000000000000000000000000000000);
        validatorFields[0][5] = bytes32(0xaf21030000000000000000000000000000000000000000000000000000000000);
        validatorFields[0][6] = bytes32(0xffffffffffffffff000000000000000000000000000000000000000000000000);
        validatorFields[0][7] = bytes32(0xffffffffffffffff000000000000000000000000000000000000000000000000);

        eigenPod.verifyWithdrawalCredentials(
            1695685296,
            validatorIndices,
            withdrawalCredentialProofs,
            validatorFields
        );

        vm.stopBroadcast();
    }
}